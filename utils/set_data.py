# -*- coding: utf-8 -*-
"""1. Подготовка данных - получение векторов BERT и извлечение признаков.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FjGjMqY_7pZ9yIWF6EtAXwds_CU-HQ-T

# Принцип работы 
Текстовое описание видео, полученное из полей "fulltitle", "description" мы: 

*  переведём предложение в нормальный вид, если оно набрано в верхнем регистре;
*  очистим от текст от специальных и обычных символов, двойных пробелов, ограничение по минимальной длинне для векторизации текста;
*  лемматизацию не делаем, т.к. работаем с векторами BERT
*  разобъём текст на предложения;
*  предложения разобъём на n-граммы, длинной 2 - 6 слов;
*  если в в n-грамме на первом или последнем месте стоит слово из топа 500 по закону распределению Ципфа, то такие n-граммы игнорируем;
*  получим вектора для предложений и n-грамм;
*  извлечём дополнительные признаки: 
    *  признак извлечения текста из предложения или определённой n-граммы;
    *  продолжительность (по логарифмической шкале, основание логарифма = 10);
    *  доля лайков по отношению к количеству просмотра;
    *  доля дизлайков по отношению к количеству просмотров;
    *  доля комментариев по отношению к количеству просмотров;
    *  дата загрузки;

# ИМПОРТ
"""

# A dependency of the preprocessing for BERT inputs
# !pip install -q -U tensorflow-text

import os
import sys
import re
import time
import math
import pandas as pd
import numpy as np
import pprint
import tempfile
from typing import Dict, Text

from sklearn.neighbors import NearestNeighbors
from scipy.spatial.distance import cosine 
import nltk
# nltk.download('punkt')
from nltk.tokenize import sent_tokenize
from nltk.util import ngrams

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Model
from tensorflow.keras.layers import Input, Dense, Dropout
from tensorflow.keras.layers import Embedding, Flatten, Input, concatenate, Reshape
from tensorflow.keras.utils import plot_model, to_categorical
from tensorflow.keras.optimizers import Adam, Adadelta
from tensorflow.keras.callbacks import ModelCheckpoint, Callback
import tensorflow_hub as hub
import tensorflow_text as text

from matplotlib import pyplot as plt

PATH = ''
BERT_MODEL_PATH = '../bert_api/model/bert_pt_model.h5'

# Обезличеная база данных видеоконтента 
concurs_data = 'concurs_data.csv'

"""# ДАННЫЕ

## 500 самых частых слов по закону Ципфа
"""

# 500 Самых частых слов по закону Ципфа
cipf_500 = [
  'и',
  'в',
  'не',
  'на',
  'я',
  'быть',
  'он',
  'с',
  'что',
  'а',
  'по',
  'это',
  'она',
  'этот',
  'к',
  'но',
  'они',
  'мы',
  'как',
  'из',
  'у',
  'который',
  'то',
  'за',
  'свой',
  'что',
  'весь',
  'год',
  'от',
  'так',
  'о',
  'для',
  'ты',
  'же',
  'все',
  'тот',
  'мочь',
  'вы',
  'человек',
  'такой',
  'его',
  'сказать',
  'только',
  'или',
  'ещё',
  'бы',
  'себя',
  'один',
  'как',
  'уже',
  'до',
  'время',
  'если',
  'сам',
  'когда',
  'другой',
  'вот',
  'говорить',
  'наш',
  'мой',
  'знать',
  'стать',
  'при',
  'чтобы',
  'дело',
  'жизнь',
  'кто',
  'первый',
  'очень',
  'два',
  'день',
  'её',
  'новый',
  'рука',
  'даже',
  'во',
  'со',
  'раз',
  'где',
  'там',
  'под',
  'можно',
  'ну',
  'какой',
  'после',
  'их',
  'работа',
  'без',
  'самый',
  'потом',
  'надо',
  'хотеть',
  'ли',
  'слово',
  'идти',
  'большой',
  'должен',
  'место',
  'иметь',
  'ничто',
  'то',
  'сейчас',
  'тут',
  'лицо',
  'каждый',
  'друг',
  'нет',
  'теперь',
  'ни',
  'глаз',
  'тоже',
  'тогда',
  'видеть',
  'вопрос',
  'через',
  'да',
  'здесь',
  'дом',
  'да',
  'потому',
  'сторона',
  'какой-то',
  'думать',
  'сделать',
  'страна',
  'жить',
  'чем',
  'мир',
  'об',
  'последний',
  'случай',
  'голова',
  'более',
  'делать',
  'что-то',
  'смотреть',
  'ребенок',
  'просто',
  'конечно',
  'сила',
  'российский',
  'конец',
  'перед',
  'несколько',
  'вид',
  'система',
  'всегда',
  'работать',
  'между',
  'три',
  'нет',
  'понять',
  'пойти',
  'часть',
  'спросить',
  'город',
  'дать',
  'также',
  'никто',
  'понимать',
  'получить',
  'отношение',
  'лишь',
  'второй',
  'именно',
  'ваш',
  'хотя',
  'ни',
  'сидеть',
  'над',
  'женщина',
  'оказаться',
  'русский',
  'один',
  'взять',
  'прийти',
  'являться',
  'деньги',
  'почему',
  'вдруг',
  'любить',
  'стоить',
  'почти',
  'земля',
  'общий',
  'ведь',
  'машина',
  'однако',
  'сразу',
  'хорошо',
  'вода',
  'отец',
  'высокий',
  'остаться',
  'выйти',
  'много',
  'проблема',
  'начать',
  'хороший',
  'час',
  'это',
  'сегодня',
  'право',
  'совсем',
  'нога',
  'считать',
  'главный',
  'решение',
  'увидеть',
  'дверь',
  'казаться',
  'образ',
  'писать',
  'история',
  'лучший',
  'власть',
  'закон',
  'все',
  'война',
  'бог',
  'голос',
  'найти',
  'поэтому',
  'стоять',
  'вообще',
  'тысяча',
  'больше',
  'вместе',
  'маленький',
  'книга',
  'некоторый',
  'решить',
  'любой',
  'возможность',
  'результат',
  'ночь',
  'стол',
  'никогда',
  'имя',
  'область',
  'молодой',
  'пройти',
  'например',
  'статья',
  'оно',
  'число',
  'компания',
  'про',
  'государственный',
  'полный',
  'принять',
  'народ',
  'никакой',
  'советский',
  'жена',
  'настоящий',
  'всякий',
  'группа',
  'развитие',
  'процесс',
  'суд',
  'давать',
  'ответить',
  'старый',
  'условие',
  'твой',
  'пока',
  'средство',
  'помнить',
  'начало',
  'ждать',
  'свет',
  'пора',
  'путь',
  'душа',
  'куда',
  'нужно',
  'разный',
  'нужный',
  'уровень',
  'иной',
  'форма',
  'связь',
  'уж',
  'минута',
  'кроме',
  'находиться',
  'опять',
  'многий',
  'белый',
  'собственный',
  'улица',
  'черный',
  'написать',
  'вечер',
  'снова',
  'основной',
  'качество',
  'мысль',
  'дорога',
  'мать',
  'действие',
  'месяц',
  'оставаться',
  'государство',
  'язык',
  'любовь',
  'взгляд',
  'мама',
  'играть',
  'далекий',
  'лежать',
  'нельзя',
  'век',
  'школа',
  'подумать',
  'уйти',
  'цель',
  'среди',
  'общество',
  'посмотреть',
  'деятельность',
  'организация',
  'кто-то',
  'вернуться',
  'президент',
  'комната',
  'порядок',
  'момент',
  'театр',
  'следовать',
  'читать',
  'письмо',
  'подобный',
  'следующий',
  'утро',
  'особенно',
  'помощь',
  'ситуация',
  'роль',
  'бывать',
  'ходить',
  'рубль',
  'начинать',
  'появиться',
  'смысл',
  'состояние',
  'называть',
  'рядом',
  'квартира',
  'назад',
  'равный',
  'из-за',
  'орган',
  'внимание',
  'тело',
  'труд',
  'прийтись',
  'хотеться',
  'сын',
  'мера',
  'пять',
  'смерть',
  'живой',
  'рынок',
  'программа',
  'задача',
  'предприятие',
  'известный',
  'окно',
  'вести',
  'совершенно',
  'военный',
  'разговор',
  'показать',
  'правительство',
  'важный',
  'семья',
  'великий',
  'производство',
  'простой',
  'значит',
  'третий',
  'сколько',
  'огромный',
  'давно',
  'политический',
  'информация',
  'действительно',
  'положение',
  'поставить',
  'бояться',
  'наконец',
  'центр',
  'происходить',
  'ответ',
  'муж',
  'автор',
  'все-таки',
  'стена',
  'существовать',
  'даже',
  'интерес',
  'становиться',
  'федерация',
  'правило',
  'оба',
  'часто',
  'московский',
  'управление',
  'слышать',
  'быстро',
  'смочь',
  'заметить',
  'как-то',
  'мужчина',
  'долго',
  'правда',
  'идея',
  'партия',
  'иногда',
  'использовать',
  'пытаться',
  'готовый',
  'чуть',
  'зачем',
  'представить',
  'чувствовать',
  'создать',
  'совет',
  'счет',
  'сердце',
  'движение',
  'вещь',
  'материал',
  'неделя',
  'чувство',
  'затем',
  'данный',
  'заниматься',
  'продолжать',
  'красный',
  'глава',
  'ко',
  'слушать',
  'наука',
  'узнать',
  'ряд',
  'газета',
  'причина',
  'против',
  'плечо',
  'современный',
  'цена',
  'план',
  'приехать',
  'речь',
  'четыре',
  'отвечать',
  'точка',
  'основа',
  'товарищ',
  'культура',
  'слишком',
  'рассказывать',
  'вполне',
  'далее',
  'рассказать',
  'данные',
  'представлять',
  'мнение',
  'социальный',
  'около',
  'документ',
  'институт',
  'ход',
  'брать',
  'забыть',
  'проект',
  'ранний',
  'встреча',
  'особый',
  'целый',
  'директор',
  'провести',
  'спать',
  'плохой',
  'может',
  'впрочем',
  'сильный',
  'наверное',
  'скорый',
  'ведь',
  'срок',
  'палец',
  'опыт',
  'помочь',
  'больше',
  'приходить',
  'служба'
]

"""## Датафрейм"""

df_concurs = pd.read_csv(PATH + concurs_data)

"""## Отберём популярные видео 
Не будем обрабатывать все видео - колаб(бесплатная версия) вылетает, не хватает ресурсов. В этом ноутбуке мы продемонстируем концепт, для возьмём количество данных для демонстрации принципа работы, а "боевые" вектора и данные создадим с помощью утилиты set_data.py на сервере, файл доступен в папке проекта на гитхабе в папке "utils".
"""

df_popular = df_concurs.sort_values(by='view_count', ascending=False)[0:10000]

df_popular['fulltitle'].head()

"""# BERT

## Загрузка
"""

model = keras.models.load_model(BERT_MODEL_PATH, custom_objects={'KerasLayer': hub.KerasLayer})
model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=(0.000005)), metrics=['accuracy'])

"""## Проверим работу"""

# predict = model.predict(['text'])
# vector = predict[0].tolist()
# print('VECTOR', vector)

"""# ФУНКЦИИ"""

# Очищаем текст регулярными выражениями
def clearText(text):
  text = re.sub(r'[\n\t]', '', text).strip()
  text = re.sub(r'[^\w\d\s]', '', text)
  text = re.sub(r'\s+', ' ', text)
  if len(text) < 3:
    return False
  return text


# Получение спска ngramm
def getNgram(n, sent):
  ngram_list = []
  word_list = sent.split()
  ngrm = ngrams(word_list, n)
  # Перебираем полученные n-граммы
  for ng in ngrm:
    # Если первое или последнее слово в списке cipf_500 - пропускаем n-грамму
    if ng[0] in cipf_500 or ng[-1] in cipf_500:
      continue

    ng_str = ' '.join(ng).strip()
    # Если в n-грамме нет слова (от 3х букв) - пропускаем n-грамму
    if re.search(r'[^a-zA-zа-яёА-ЯЁ]{3,}', ng_str):
      continue

    # print('NG', n, ng_str)
    ngram_list.append(ng_str)

  return ngram_list


# Получаем данные и свойства из строки датафремма
def getRowData(row, vector_type):
  key = row['_key']
  fulltitle = row['fulltitle']
  duration = round(math.log10(row['duration']), 4)
  like_proportion = round(row['like_count'] / row['view_count'], 6)
  dislike_proportion = round(row['dislike_count'] / row['view_count'], 6)
  comment_proportion = round(row['comment_count'] / row['view_count'], 6)	
  data_list = [key, fulltitle, vector_type, duration, like_proportion, dislike_proportion, comment_proportion, row['upload_date']]
  return data_list

"""# СОЗДАДИМ BERT ВЕКТОРА И ДАННЫЕ С ПРИЗНАКАМИ
В рабочей версии - вектор должен создаваться при загрузке видео, а не на этом шаге - для того, что бы сократить количество операций.
"""

time_start = time.time()
data_list = []
vector_list = []

for i in range(df_popular.shape[0]):
  df_row = df_popular.iloc[i]

  if pd.notna(df_row['fulltitle']):
    # Разбираем на предложения
    fulltitle_arr = sent_tokenize(df_row['fulltitle'])
    # Проходим по каждому предложению
  
    for sent in fulltitle_arr:
      sent = clearText(sent)
      # Если предложение короче установленной длинны (3 символа)- пропускаем
      if not sent:
        continue
      # Если все буквы в предложении в верхнем регистре - приводим предложение в нормальный вид
      check_letter = False

      for letter in sent:
        if letter.islower():
          check_letter = True
          continue

      if not check_letter:
        # Приводим предложение к нормальному виду
        sent = sent.lower() 
        sent = sent.capitalize()

      # Получаем вектор предложения
      predict = model.predict([sent])
      vector = predict[0].tolist()
      vector_list.append(vector)

      # Получаем данные и свойства (тип вектора = 7, предложение)
      data = getRowData(df_row, 7)
      data_list.append(data)

      # N-граммы
      n_list = [2, 3, 4, 5, 6]
      ngram_list = []
      for n in n_list:
        ng_list = getNgram(n, sent)
        # Перебираем список n-грамм
        for ng in ng_list:
          # Получаем вектор n-граммы
          predict = model.predict([ng])
          vector = predict[0].tolist()
          vector_list.append(vector)
          # Получаем данные и свойства (тип вектора = 7, предложение)
          data = getRowData(df_row, n)
          data_list.append(data)
  print(i, len(vector_list))



# Сохраняем вектора
vector_np = np.array(vector_list)
print('VECTOR SHAPE', vector_np.shape)
np.save('vector.npy', vector_np)

# Сохраняем данные
df_data = pd.DataFrame(data_list, columns=[
  'key', 
  'fulltitle', 
  'vector_type', 
  'duration', 
  'like_proportion', 
  'dislike_proportion',
  'comment_proportion',
  'upload_date'
])
print('DATA SHAPE', df_data.shape)
df_data.to_csv('data.csv', index=False)